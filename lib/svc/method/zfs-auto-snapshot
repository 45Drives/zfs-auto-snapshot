#!/usr/bin/ksh

#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#


#
# This SMF method takes snapshots periodically of a zfs filesystem, with
# options to allow the user to keep a limited number of snapshots, or snapshot
# all child datasets. More documentation available at
# http://blogs.sun.com/timf
#
# The service will move itself into maintenance if it's unable to take a
# snapshot, destroy a snapshot as per the snapshot retention policy, unable to
# zfs send a dataset (if configured) or is unable to create or update the cron
# job.
# 



# For interested developers, the main functions here, are schedule_snapshots,
# unschedule_snapshots and take_snapshot : the exit conditions from these
# functions check the state of the service before returning an appropriate
# value. The check_failure method is responsible for checking error codes from
# subprocesses, and when called with a non-zero argument, will degrade the
# service, and log an appropriate error message.






. /lib/svc/share/smf_include.sh

result=$SMF_EXIT_OK

# this function validates the properties in the FMRI passed to it, then
# calls a function to create cron job that schedules a snapshot schedule based
# on the properties set in the service instance.
# $1 is assumed to be a valid FMRI
function schedule_snapshots {

	typeset FMRI=$1
	# FIXME need work in here to actually validate the FMRI props
	typeset FILESYS=$(svcprop -p zfs/fs-name $FMRI)
	typeset INTERVAL=$(svcprop -p zfs/interval $FMRI)
	typeset PERIOD=$(svcprop -p zfs/period $FMRI)
	typeset OFFSET=$(svcprop -p zfs/offset $FMRI)
	typeset STATE=0	

	typeset BACKUP=$(svcprop -p zfs/backup $FMRI)
	typeset BACKUP_SAVE_CMD=$(svcprop -p zfs/backup $FMRI)

	case $BACKUP in
	'full' | 'incremental' )
		if [ -z "${BACKUP_SAVE_CMD}" ]
		then
		  check_failure 1 "Backup requested, but no backup command specified."
		fi
	;;
	esac

	# for now, we're forcing the offset to be 0 seconds.
	typeset OFFSET=0

	# validate the filesystem
	zfs list $FILESYS 2>&1 1> /dev/null
	check_failure $? "ZFS filesystem does not exist!"

	# remove anything that's there at the moment
	unschedule_snapshots $FMRI		

	add_cron_job $INTERVAL $PERIOD $OFFSET $FMRI
	
	# finally, check our status before we return
	STATE=$(svcprop -p restarter/state $FMRI)
	if [ "${STATE}" == "maintenance" ]
	then
		STATE=1
	else
		STATE=0
	fi	
	return $STATE
}


#
# Adding a cron job that runs exactly every x time-intervals is hard to do
# properly.
#
# For now, what I'm doing, is dividing the interval up into x bite chunks
# and running the cron job that often. The problem comes where the interval
# doesn't evenly divide up into x, leaving us taking to many, or too
# few snapshots at the edge of time intervals.
#
# A new implementation of cron would be nice, but until then, we'll
# just live with this.
#
function add_cron_job { # $INTERVAL $PERIOD $OFFSET $FMRI

	typeset INTERVAL=$1
	typeset PERIOD=$2
	typeset OFFSET=$3
	typeset FMRI=$4

	case $INTERVAL in
	'minutes')
		TIMES=$(get_divisor 0 59 $PERIOD)
		ENTRY="$TIMES * * * *"		
	;;

	'hours')
		TIMES=$(get_divisor 0 23 $PERIOD)
		ENTRY="0 $TIMES * * *"
	;;

	'days')
		TIMES=$(get_divisor 1 31 $PERIOD)
		ENTRY="0 0 $TIMES * *"
	;;

	'months')
		TIMES=$(get_divisor 1 12 $PERIOD)
		ENTRY="0 0 1 $TIMES *"
	;;
	esac

	# adding a cron job is essentially just looking for an existing entry,
	# removing it, and appending a new one. Neato.
	crontab -l | grep -v "/lib/svc/method/zfs-auto-snapshot $FMRI$" > /tmp/saved-crontab.$$
	echo "${ENTRY} /lib/svc/method/zfs-auto-snapshot $FMRI" >> /tmp/saved-crontab.$$
	crontab /tmp/saved-crontab.$$
	check_failure $? "Unable to add cron job!"

	rm /tmp/saved-crontab.$$
	return 0
}



# this function removes a cron job was taking snapshots of $FMRI
# $1 is assumed to be a valid FMRI
function unschedule_snapshots {

	typeset FMRI=$1

	crontab -l | grep -v "/lib/svc/method/zfs-auto-snapshot $FMRI$" > /tmp/saved-crontab.$$
	crontab /tmp/saved-crontab.$$
	check_failure $? "Unable to unschedule snapshots for $FMRI"
	rm /tmp/saved-crontab.$$

	# finally, check our status before we return
	STATE=$(svcprop -p restarter/state $FMRI)
	if [ "${STATE}" == "maintenance" ]
	then
		STATE=1
	else
		STATE=0
	fi
}


# This function actually takes the snapshot of the filesystem. This is what
# really does the work. We name snapshots based on a standard time format
# $1 is assumed to be a valid FMRI
function take_snapshot {

	typeset FMRI=$1

	typeset DATE=$(date +%F-%H:%M:%S)
	typeset FILESYS=$(svcprop -p zfs/fs-name $FMRI)
	typeset KEEP=$(svcprop -p zfs/keep $FMRI)
	typeset SNAP_CHILDREN=$(svcprop -p zfs/snapshot-children $FMRI)

	typeset BACKUP=$(svcprop -p zfs/backup $FMRI)
	typeset STATE=0

	# an identifier allows us to setup multiple snapshot schedules
	# per filesystem - so we append a :<id> token if the user has
	# requested one, which then gets used in the SNAPNAME.  SMF
	# returns the value '""' for the empty string to differentiate
	# between an unset property, and a set-but-empty property.
	# Shocking, I know.
	typeset LABEL="$(svcprop -p zfs/label $FMRI)"
	if [ "$LABEL" != "\"\"" ]
	then
		LABEL=":${LABEL}"
	else
		LABEL=""
	fi

	typeset SNAPNAME="zfs-auto-snap${LABEL}-${DATE}"
	

	# Ok, now say cheese! If we're taking recursive snapshots,
	# walk through the children, destroying old ones if required.
	if [ "${SNAP_CHILDREN}" == "true" ]
	then

           OS=$(uname -r)
	   for child in $(zfs list -r -H -o name -t filesystem,volume $FILESYS)
	   do
		destroy_older_snapshots $child $KEEP $LABEL
		if [ "${OS}" != "5.11" ]
		then
		   # Solaris 10 doesn't have recursive snapshots, but we do
		   # them outside the loop otherwise.
	     	   zfs snapshot $child@$SNAPNAME
		   check_failure $? "Unable to take snapshot $child@$SNAPNAME."
		fi
	   done
           # take the recursive snapshots if we're on Solaris Nevada.
           if [ "${OS}" == "5.11" ]
	   then
               zfs snapshot -r $FILESYS@$SNAPNAME
	       check_failure $? "Unable to take recursive snapshots $FILESYS@$SNAPNAME."
           fi

        else

  	   destroy_older_snapshots $FILESYS $KEEP
	   zfs snapshot $FILESYS@$SNAPNAME
	   check_failure $? "Unable to take snapshot $FILESYS@$SNAPNAME."

	fi

	# If the user has asked for backups, go ahead and do this.
	if [ "${BACKUP}" != "none" ]
	then
		take_backup $FILESYS $BACKUP "$LABEL" $FMRI
		check_failure $? "Unable to backup filesystem $FILESYS using \
				$BACKUP backup strategy."
	fi


	# finally, check our status before we return
	STATE=$(svcprop -p restarter/state $FMRI)
	if [ "${STATE}" == "maintenance" ]
	then
		STATE=1
	else
		STATE=0
	fi
	return $STATE
}

# Given a filesystem name, and a limit of the number of snapshots we want,
# along with the identifier for this set of snapshots,
# we destroy all older snapshots of this filesystem whose names begin
# with the text "zfs-auto-snap<id>". Note that here we destroy one more snapshot
# than the "keep" threshold - this is because in the context of calling this
# function, we're already creating one new auto-snapshot.
#
function destroy_older_snapshots {

	typeset FILESYS=$1
	typeset COUNTER=$2
	typeset LABEL=$3

	if [ "${COUNTER}" == "all" ]
	then
		return 0
	fi
	
	COUNTER=$(($COUNTER - 1))
	
	# walk through the snapshots, newest first, destroying older ones
	for snapshot in $(zfs list -r -t snapshot -H -o name $FILESYS \
		 | grep "$FILESYS@zfs-auto-snap${LABEL}" | sort -r)
	do
		if [ $COUNTER -le 0 ]
		then
			print_log "$snapshot being destroyed as per retention policy."
			zfs destroy $snapshot
			check_failure $? "Unable to destroy $snapshot"
		else
			# don't destroy this one			
			COUNTER=$(($COUNTER - 1))
		fi
	done
}

# Given the exit status of a command, an integer, 0 if the command completed
# without errors. If the command exited with errors, we degrade the
# state of this service into maintenance mode. We also log an error message
# as passed into this function.
#
function check_failure { # integer exit status, error message to display
  
	typeset RESULT=$1
	typeset ERR_MSG=$2

	if [ $RESULT -ne 0 ]
	then
		print_log "Error: $ERR_MSG"
		print_log "Moving service $FMRI to maintenance mode."
		svcadm mark maintenance $FMRI
	fi

}


# A function we use to emit output. Right now, this goes to syslog via logger(1)
# but it would be much nicer to be able to print it to the svc log file for
# each individual service instance - tricky because we're being called from
# cron, most of the time and are detached from smf.
function print_log { # message to display

	logger -t zfs-auto-snap -p daemon.notice $*
}


# Given a range start, end and width of period, return a comma
# separated string of numbers within that range and conforming to
# that period. This isn't ideal, but it'll do for now.
#
function get_divisor { # start period, end period, width of period

    typeset START=$1
    typeset END=$2
    typeset WIDTH=$3
    typeset RANGE=$START
    typeset JUMP=$(( $RANGE + $WIDTH ))

    while [ $JUMP -lt $END ]
    do
	RANGE="$RANGE,$JUMP"
	JUMP=$(( $JUMP + $WIDTH ))
    done
	
    echo $RANGE
}


# Given a filesytem name, and a backup type (currently "complete" or
# "incremental") along with an FMRI, we backup the filesystem - either
# from the latest snapshot that was taken, or by an incremental backup.
# Properties in the FMRI tell us what to do with the backup stream
#
function take_backup { # filesystem backup-type label fmri

    typeset FILESYS=$1
    typeset BACKUP=$2
    typeset LABEL=$3
    typeset FMRI=$4


    # obtain lock from fmri
    typeset LOCK=$(svcprop -p zfs/backup-lock $FMRI)
    if [ "$LOCK" != "unlocked" ]
    then
	# Unable to perform this backup due to an existing backup being
	# executed for this dataset. This would result in moving the
	# service to maintenance mode if we're doing incrementals, since
	# missing an incremental backup will result in the user being unable
	# to restore future incremental backups. This isn't so serious for
	# full backups.
        print_log "Unable to backup $FILESYS: $LOCK."

	if [ "$BACKUP" == "incremental" ]
	then
	     print_log "A lock prevented us from performing an incremental backup."
	     return 1
	else
	     print_log "Full backup not completed for $FMRI."
	     return 0
	fi
    else
 	# set our lock. (this isn't atomic, unfortunately :-( )
        svccfg -s $FMRI setprop zfs/backup-lock = astring: \
	"\"$BACKUP backup in progress by PID $$\""
	svcadm refresh $FMRI
    fi

    typeset BACKUP_SAVE_CMD=$(svcprop -p zfs/backup-save-cmd $FMRI \
				| sed -e 's/\\//g')
    typeset SNAP_CHILDREN=$(svcprop -p zfs/snapshot-children $FMRI)
    typeset BACKUP_DATASETS=""

    # Determine how many datasets we have to backup
    if [ "$SNAP_CHILDREN" == "true" ]
    then
	BACKUP_DATASETS=$(zfs list -r -H -o name -t filesystem,volume $FILESYS)
    else
        # only one dataset to worry about here.
	BACKUP_DATASETS=$FILESYS
    fi

    # loop through the datasets, backing up each one.
    for dataset in $BACKUP_DATASETS
    do

      # An initial check of the input parameters, to see how we should proceed
      case $BACKUP in
        "incremental")
		# get the last two snapshots
		LAST_SNAP=$(zfs list -H -o name -r -t snapshot $dataset \
			    | grep "$dataset@zfs-auto-snap${LABEL}" | tail -1)

		PREV_SNAP=$(zfs list -H -o name -r -t snapshot $dataset \
			    | grep "$dataset@zfs-auto-snap${LABEL}" \
			    | tail -2 | head -1)

		if [ "$PREV_SNAP" == "$LAST_SNAP" ]
		then
		    print_log "Previous snap not found of $dataset, taking full backup."
		    BACKUP="full"
		fi
	;;
        "full")
 		LAST_SNAP=$(zfs list -H -o name -r -t snapshot $dataset \
			    | grep "$dataset@zfs-auto-snap${LABEL}" | tail -1)
	;;
        *)
		check_failure 1 "Unknown backup type $BACKUP"
		svccfg -s $FMRI setprop zfs/backup-lock = astring: "unlocked"
		svcadm refresh $FMRI
		return 1
	;;
       esac

 
       # Now perform the backup. Note that on errors, we'll immediately mark
       # the service as being in maintenance mode, however, backups will still 
       # be attempted for other datasets in our list.
       case $BACKUP in
	"incremental")	  
	    zfs send -i $PREV_SNAP $LAST_SNAP | $BACKUP_SAVE_CMD
	    check_failure $? "Error performing incremental backup of $dataset."
	;;
	"full")
	    zfs send $LAST_SNAP | $BACKUP_SAVE_CMD
	    check_failure $? "Error performing full backup of $dataset."
	;;
       esac
   done

   # Now we can release our lock
   svccfg -s $FMRI setprop zfs/backup-lock = astring: "unlocked"
   svcadm refresh $FMRI

}



# Here's the beginning of the main script. As we're a method script for SMF,
# we take start and stop arguments, and assume that the $SMF_FMRI value is being
# set. For start and stop, our task is to create a cron job that will take a
# snapshot of the specified filesystem.
#
# Without start | stop arguments, we assume we're being called from the cron job
# created above, where the argument is the FMRI containing properties we can
# consult to in order to actually take the snapshot.

# $1 start | stop | an FMRI that we want to take snapshots of.
case "$1" in
'start')

	schedule_snapshots $SMF_FMRI
	if [ $? -eq 0 ]
 	then
		result=$SMF_EXIT_OK
	else
		print_log "Problem taking snapshots for $SMF_FMRI"
		result=$SMF_EXIT_ERR_FATAL
	fi
        ;;

'stop')
	unschedule_snapshots $SMF_FMRI
	if [ $? -eq 0 ]
 	then
		result=$SMF_EXIT_OK
	else
		print_log "Problem taking snapshots for $SMF_FMRI"
		result=$SMF_EXIT_ERR_FATAL
	fi
        ;;

# the default case, we actually call from the cron job itself that's
# executing this script, and do the job of taking snapshots.
*)
	SMF_FMRI=$1
	# are we being called with the correct argument (an FMRI) ?

	case $SMF_FMRI in
		svc:/*)
			take_snapshot $SMF_FMRI
			if [ $? -eq 0 ]
			then
				result=$SMF_EXIT_OK
			else
				result=$SMF_EXIT_ERR_FATAL
			fi
			;;
		*)
			# not logging these messages - we're assuming a curious
			# user has run the script from the command line.
			echo "Usage from SMF : zfs-auto-snapshot [start | stop]"
			echo "Usage from cron: zfs-auto-snapshot svc:/system/filesystem/zfs/auto-snapshot:instance"
			result=$SMF_EXIT_ERR_FATAL
			;;
		esac			
	;;

esac

exit $result
